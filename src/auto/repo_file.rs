// This file was generated by gir (???) from gir-files (???)
// DO NOT EDIT

use Repo;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct RepoFile(Object<ffi::OstreeRepoFile>);

    match fn {
        get_type => || ffi::ostree_repo_file_get_type(),
    }
}

impl RepoFile {
    //pub fn ensure_resolved(&self, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::ostree_repo_file_ensure_resolved() }
    //}

    pub fn get_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_checksum(self.to_glib_none().0))
        }
    }

    pub fn get_repo(&self) -> Option<Repo> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_repo(self.to_glib_none().0))
        }
    }

    pub fn get_root(&self) -> Option<RepoFile> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_root(self.to_glib_none().0))
        }
    }

    //pub fn get_xattrs(&self, out_xattrs: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::ostree_repo_file_get_xattrs() }
    //}

    //pub fn tree_find_child(&self, name: &str, is_dir: bool, out_container: /*Ignored*/&glib::Variant) -> i32 {
    //    unsafe { TODO: call ffi::ostree_repo_file_tree_find_child() }
    //}

    //pub fn tree_get_contents(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi::ostree_repo_file_tree_get_contents() }
    //}

    pub fn tree_get_contents_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_tree_get_contents_checksum(self.to_glib_none().0))
        }
    }

    //pub fn tree_get_metadata(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi::ostree_repo_file_tree_get_metadata() }
    //}

    pub fn tree_get_metadata_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_tree_get_metadata_checksum(self.to_glib_none().0))
        }
    }

    //pub fn tree_query_child(&self, n: i32, attributes: &str, flags: /*Ignored*/gio::FileQueryInfoFlags, out_info: /*Ignored*/&gio::FileInfo, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::ostree_repo_file_tree_query_child() }
    //}

    //pub fn tree_set_metadata(&self, checksum: &str, metadata: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi::ostree_repo_file_tree_set_metadata() }
    //}
}
